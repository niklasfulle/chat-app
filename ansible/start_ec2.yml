---
- name: AWS-Docker-Ansible Setup
  hosts: local
  connection: local
  gather_facts: False

  vars_files:
    - vars.yml

  vars:
    user_data: "{{ lookup('file', '../install.sh') }}"

  tasks:
    - name: Create VPC
      amazon.aws.ec2_vpc_net:
        name: "{{ vpc_name }}"
        cidr_block: "{{ vpc_cidr_block }}"
        region: "{{ aws_region }}"
        state: "present"
        ec2_access_key: "{{ aws_access_key }}"
        ec2_secret_key: "{{ aws_secret_key }}"
      register: webserver_vpc

    - name: sleep for 30 seconds and continue with play
      wait_for: timeout=30
      delegate_to: localhost

    - name: Set VPC ID in variable
      set_fact:
        vpc_id: "{{ webserver_vpc.vpc.id }}"

    - name: Create Public Subnet
      amazon.aws.ec2_vpc_subnet:
        state: "present"
        vpc_id: "{{ vpc_id }}"
        cidr: "{{ public_subnet_1_cidr }}"
        az: "{{ aws_region }}a"
        region: "{{ aws_region }}"
        resource_tags:
          Name: "Public Subnet"
        ec2_access_key: "{{ aws_access_key }}"
        ec2_secret_key: "{{ aws_secret_key }}"
      register: my_public_subnet

    - name: Set Public Subnet ID in variable
      set_fact:
        public_subnet_id: "{{ my_public_subnet.subnet.id }}"

    - name: Create Internet Gateway for VPC
      amazon.aws.ec2_vpc_igw:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        state: "present"
        ec2_access_key: "{{ aws_access_key }}"
        ec2_secret_key: "{{ aws_secret_key }}"
      register: docker_vpc_igw

    - name: Set Internet Gateway ID in variable
      set_fact:
        igw_id: "{{ docker_vpc_igw.gateway_id }}"

    - name: Set up public subnet route table
      amazon.aws.ec2_vpc_route_table:
        vpc_id: "{{ vpc_id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "Public"
        subnets:
          - "{{ public_subnet_id }}"
        routes:
          - dest: "0.0.0.0/0"
            gateway_id: "{{ igw_id }}"
        ec2_access_key: "{{ aws_access_key }}"
        ec2_secret_key: "{{ aws_secret_key }}"

    - name: Create security group
      amazon.aws.ec2_security_group:
        name: AWS-Docker-Ansible-group
        description: "A Security group"
        region: "{{aws_region}}"
        vpc_id: "{{ vpc_id }}"
        ec2_access_key: "{{ aws_access_key }}"
        ec2_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 5601
            to_port: 5601
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 9200
            to_port: 9200
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 4173
            to_port: 4173
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            from_port: 0
            to_port: 65535
            cidr_ip: 0.0.0.0/0
      register: firewall

    - name: Create EC-2 instance
      amazon.aws.ec2_instance:
        name: "public-compute-instance"
        key_name: "{{ key_name }}"
        vpc_subnet_id: "{{ public_subnet_id }}"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_type }}"
        security_group: "{{ firewall.group_id }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        network:
          assign_public_ip: true
        image_id: "{{ ami_id }}"
        user_data: "{{ user_data }}"
        tags:
          Environment: Testing
      register: ec2

    - name: Display the public IP address of the server.
      debug:
        msg: "{{ ec2.instances[0].network_interfaces[0].association.public_ip }}"
